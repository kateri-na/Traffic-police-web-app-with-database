// <auto-generated />
using System;
using C__laba_2_console_traffic_police.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace web_police.Migrations
{
    [DbContext(typeof(TrafficPoliceContext))]
    partial class TrafficPoliceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("DriverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("driverLicenceID")
                        .HasColumnType("int");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            DriverId = 1,
                            DriverAddress = "Россия, г. Майкоп, Новый пер., д. 20 кв.116",
                            DriverMiddleName = "Кириллович",
                            DriverName = "Семен",
                            DriverPhoneNumber = "+7 (966) 457-70-80",
                            DriverSurname = "Содовский",
                            driverLicenceID = 1
                        },
                        new
                        {
                            DriverId = 2,
                            DriverAddress = "Россия, г. Владимир, Березовая ул., д. 20 кв.208",
                            DriverMiddleName = "Трофимовна",
                            DriverName = "Марианна",
                            DriverPhoneNumber = "+7 (946) 384-70-82",
                            DriverSurname = "Гунина",
                            driverLicenceID = 2
                        },
                        new
                        {
                            DriverId = 3,
                            DriverAddress = "Россия, г. Воронеж, Полевая ул., д. 4 кв.39",
                            DriverMiddleName = "Евгениевич",
                            DriverName = "Денис",
                            DriverPhoneNumber = "+7 (959) 640-62-77",
                            DriverSurname = "Касьяненко",
                            driverLicenceID = 3
                        },
                        new
                        {
                            DriverId = 4,
                            DriverAddress = "Россия, г. Нижневартовск, Речной пер., д. 17 кв.180",
                            DriverMiddleName = "Федоровна",
                            DriverName = "Алиса",
                            DriverPhoneNumber = "+7 (924) 239-79-35",
                            DriverSurname = "Сабитова",
                            driverLicenceID = 4
                        },
                        new
                        {
                            DriverId = 5,
                            DriverAddress = "Россия, г. Чебоксары, Партизанская ул., д. 8 кв.122",
                            DriverMiddleName = "Ипполитович",
                            DriverName = "Данила",
                            DriverPhoneNumber = "+7 (938) 801-86-28",
                            DriverSurname = "Содовский",
                            driverLicenceID = 5
                        });
                });

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.DriverLicence", b =>
                {
                    b.Property<int?>("DriverLicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DriverLicenceId"));

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverLicenceId");

                    b.ToTable("DriversLicences");

                    b.HasData(
                        new
                        {
                            DriverLicenceId = 1,
                            BirthDate = "1994-12-13",
                            ExpirationDate = "2032-12-26",
                            IssueDate = "2022-12-26",
                            IssuingAuthority = "ГИБДД 1179009",
                            PlaceOfBirth = "Россия, г. Майкоп"
                        },
                        new
                        {
                            DriverLicenceId = 2,
                            BirthDate = "1960-10-21",
                            ExpirationDate = "2030-02-19",
                            IssueDate = "2020-02-19",
                            IssuingAuthority = "ГИБДД 1117110",
                            PlaceOfBirth = "Россия, г. Владимир"
                        },
                        new
                        {
                            DriverLicenceId = 3,
                            BirthDate = "1980-04-07",
                            ExpirationDate = "2030-06-03",
                            IssueDate = "2020-06-04",
                            IssuingAuthority = "ГИБДД 1120931",
                            PlaceOfBirth = "Россия, г. Воронеж"
                        },
                        new
                        {
                            DriverLicenceId = 4,
                            BirthDate = "1974-11-10",
                            ExpirationDate = "2027-03-08",
                            IssueDate = "2017-03-08",
                            IssuingAuthority = "ГИБДД 1162048",
                            PlaceOfBirth = "Россия, г. Нижневартовск"
                        },
                        new
                        {
                            DriverLicenceId = 5,
                            BirthDate = "1989-02-28",
                            ExpirationDate = "2023-11-11",
                            IssueDate = "2013-11-11",
                            IssuingAuthority = "ГИБДД 1197031",
                            PlaceOfBirth = "Россия, г. Чебоксары"
                        });
                });

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.Mark", b =>
                {
                    b.Property<int?>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MarkId"));

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarkId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            MarkId = 1,
                            MarkName = "Fiat"
                        },
                        new
                        {
                            MarkId = 2,
                            MarkName = "Citroen"
                        },
                        new
                        {
                            MarkId = 3,
                            MarkName = "Chevrolet"
                        },
                        new
                        {
                            MarkId = 4,
                            MarkName = "Hyundai"
                        });
                });

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.Model", b =>
                {
                    b.Property<int?>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ModelId"));

                    b.Property<int>("MarkId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("imgPath")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ModelId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            MarkId = 1,
                            ModelName = "Sedici",
                            imgPath = new byte[] { 47, 73, 109, 97, 103, 101, 115, 47, 83, 101, 100, 105, 99, 105, 46, 106, 112, 103 }
                        },
                        new
                        {
                            ModelId = 2,
                            MarkId = 2,
                            ModelName = "C8",
                            imgPath = new byte[] { 47, 73, 109, 97, 103, 101, 115, 47, 67, 56, 46, 106, 112, 103 }
                        },
                        new
                        {
                            ModelId = 3,
                            MarkId = 2,
                            ModelName = "C3 Pluriel",
                            imgPath = new byte[] { 47, 73, 109, 97, 103, 101, 115, 47, 67, 51, 80, 108, 117, 114, 105, 101, 108, 46, 106, 112, 103 }
                        },
                        new
                        {
                            ModelId = 4,
                            MarkId = 3,
                            ModelName = "Epica",
                            imgPath = new byte[] { 47, 73, 109, 97, 103, 101, 115, 47, 69, 112, 105, 99, 97, 46, 106, 112, 101, 103 }
                        },
                        new
                        {
                            ModelId = 5,
                            MarkId = 4,
                            ModelName = "Accent",
                            imgPath = new byte[] { 47, 73, 109, 97, 103, 101, 115, 47, 65, 99, 99, 101, 110, 116, 46, 106, 112, 103 }
                        });
                });

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.Penalty", b =>
                {
                    b.Property<int?>("PenaltyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PenaltyId"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverLicenceID")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("violationID")
                        .HasColumnType("int");

                    b.HasKey("PenaltyId");

                    b.ToTable("Penalties");

                    b.HasData(
                        new
                        {
                            PenaltyId = 1,
                            Date = "2021-08-17",
                            District = "Ленинский район",
                            DriverLicenceID = 1,
                            Time = "20:38",
                            violationID = 2
                        },
                        new
                        {
                            PenaltyId = 2,
                            Date = "2023-11-03",
                            District = "Советский район",
                            DriverLicenceID = 2,
                            Time = "7:41",
                            violationID = 4
                        },
                        new
                        {
                            PenaltyId = 3,
                            Date = "2005-12-31",
                            District = "Коминтерновский район",
                            DriverLicenceID = 3,
                            Time = "19:33",
                            violationID = 3
                        },
                        new
                        {
                            PenaltyId = 4,
                            Date = "2017-09-16",
                            District = "Центральный район",
                            DriverLicenceID = 4,
                            Time = "14:12",
                            violationID = 1
                        },
                        new
                        {
                            PenaltyId = 5,
                            Date = "2022-07-15",
                            District = "Советский район",
                            DriverLicenceID = 2,
                            Time = "6:15",
                            violationID = 5
                        });
                });

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.Vehicle", b =>
                {
                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeregistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("LicencePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufactureYear")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ModelID")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VIN");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VIN = "ZJ2ZX077601548459",
                            Color = "Серебристо-коричневый",
                            DeregistrationDate = "2015-10-16",
                            DriverID = 3,
                            LicencePlateNumber = "У102ТО31",
                            ManufactureYear = 2010,
                            ModelID = 2,
                            RegistrationDate = "2010-02-14"
                        },
                        new
                        {
                            VIN = "ZZ4RK753684879518",
                            Color = "Сине-фиолетовый",
                            DeregistrationDate = "2022-09-17",
                            DriverID = 2,
                            LicencePlateNumber = "О897ХТ70",
                            ManufactureYear = 2008,
                            ModelID = 1,
                            RegistrationDate = "2011-08-21"
                        },
                        new
                        {
                            VIN = "PW2GV785928208889",
                            Color = "Серебристо-бежевый",
                            DriverID = 4,
                            LicencePlateNumber = "Н016КО10",
                            ManufactureYear = 2009,
                            ModelID = 3,
                            RegistrationDate = "2019-02-16"
                        },
                        new
                        {
                            VIN = "TW9EH264781492773",
                            Color = "Белый",
                            DeregistrationDate = "2020-12-15",
                            DriverID = 5,
                            LicencePlateNumber = "К245ОХ50",
                            ManufactureYear = 2007,
                            ModelID = 4,
                            RegistrationDate = "2016-03-04"
                        },
                        new
                        {
                            VIN = "EH0GR082270787581",
                            Color = "Серебристо-ярко-фиолетовый",
                            DriverID = 1,
                            LicencePlateNumber = "Т073НЕ31",
                            ManufactureYear = 2020,
                            ModelID = 5,
                            RegistrationDate = "2020-07-17"
                        });
                });

            modelBuilder.Entity("C__laba_2_console_traffic_police.Models.Violation", b =>
                {
                    b.Property<int?>("ViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ViolationId"));

                    b.Property<int?>("Fine")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ViolationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ViolationId");

                    b.ToTable("Violations");

                    b.HasData(
                        new
                        {
                            ViolationId = 1,
                            Fine = 1000,
                            ViolationType = "Управление транспортным средством водителем, не пристегнутым ремнем безопасности"
                        },
                        new
                        {
                            ViolationId = 2,
                            Fine = 30000,
                            ViolationType = "Управление транспортным средством водителем, находящимся в состоянии опьянения"
                        },
                        new
                        {
                            ViolationId = 3,
                            Fine = 1500,
                            ViolationType = "Превышение установленной скорости движения транспортного средства на величину от 41 до 60 км/ч включительно"
                        },
                        new
                        {
                            ViolationId = 4,
                            Fine = 1000,
                            ViolationType = "Проезд на запрещающий сигнал светофора или на запрещающий жест регулировщика"
                        },
                        new
                        {
                            ViolationId = 5,
                            Fine = 500,
                            ViolationType = "Непредоставление преимущества в движении маршрутному транспортному средству"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
